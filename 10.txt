slip10
Q.1) Write a script to accept two integers(Use html form having 2 textboxes).
Write a PHP script to,
a. Find mod of the two numbers.
b. Find the power of first number raised to the second.
c. Find the sum of first n numbers (considering first number as n)
d. Find the factorial of second number.
(Write separate function for each of the above operations.)
<!DOCTYPE html>
<html>
<head>
    <title>Math Operations</title>
</head>
<body>

<form method="post" action="">
    Enter first number: <input type="number" name="num1" required><br>
    Enter second number: <input type="number" name="num2" required><br>
    <input type="submit" value="Submit">
</form>

<?php
function find_mod($num1, $num2) {
    return $num1 % $num2;
}

function find_power($num1, $num2) {
    return pow($num1, $num2);
}

function find_sum($num1) {
    return ($num1 * ($num1 + 1)) / 2;
}

function find_factorial($num2) {
    if ($num2 <= 1) {
        return 1;
    } else {
        return $num2 * find_factorial($num2 - 1);
    }
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $num1 = $_POST["num1"];
    $num2 = $_POST["num2"];

    $mod_result = find_mod($num1, $num2);
    $power_result = find_power($num1, $num2);
    $sum_result = find_sum($num1);
    $factorial_result = find_factorial($num2);

    echo "<h2>Results:</h2>";
    echo "a. Mod of $num1 and $num2: $mod_result<br>";
    echo "b. Power of $num1 raised to $num2: $power_result<br>";
    echo "c. Sum of first $num1 numbers: $sum_result<br>";
    echo "d. Factorial of $num2: $factorial_result<br>";
}
?>

</body>
</html>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
slip10->
import pandas as pd

# Assuming you have a DataFrame 'data' with 'Height' and 'Weight' columns

# Sample data
data = {
    'Height': [65, 68, 70, 60, 74, 72],
    'Weight': [120, 150, 180, 110, 200, 190]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Calculate column-wise mean
mean_values = df.mean()

# Calculate column-wise median
median_values = df.median()

# Display the results
print("Column-wise Mean:")
print(mean_values)

print("\nColumn-wise Median:")
print(median_values)
===============================================
B->
def manhattan_distance(point1, point2):
    return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])

def sum_manhattan_distances(points):
    n = len(points)
    total_distance = 0

    for i in range(n):
        for j in range(i+1, n):
            total_distance += manhattan_distance(points[i], points[j])

    return total_distance

# Example points
points = [(1, 2), (4, 6), (7, 3), (9, 5)]

# Calculate and print the sum of Manhattan distances
result = sum_manhattan_distances(points)
print(f"The sum of Manhattan distances between all pairs of points is: {result}")
#########################################################################